<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.10.0</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.10.0</version>
</dependency>

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

private static final Logger logger = LogManager.getLogger(DemoListener.class);

logger.debug("===========================debug================================");
logger.info("===========================info================================");
logger.warn("===========================warn================================");
logger.error("===========================error================================");
logger.fatal("===========================fatal================================");

严重: Unable to process Jar entry [module-info.class] from Jar [jar:file:/E:/workspaces-idea/GITHUB/glitter-spring-demo/target/spring-demo/WEB-INF/lib/log4j-api-2.10.0.jar!/] for annotations
org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19
	at org.apache.tomcat.util.bcel.classfile.Constant.readConstant(Constant.java:136)
	at org.apache.tomcat.util.bcel.classfile.ConstantPool.<init>(ConstantPool.java:59)
	at org.apache.tomcat.util.bcel.classfile.ClassParser.readConstantPool(ClassParser.java:208)
	at org.apache.tomcat.util.bcel.classfile.ClassParser.parse(ClassParser.java:118)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2058)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1934)
	at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1900)
	at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1885)
	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1317)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5355)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1763)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:618)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:565)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
四月 24, 2018 1:36:17 下午 org.springframework.web.context.ContextLoader initWebApplicationContext
信息: Root WebApplicationContext: initialization started
四月 24, 2018 1:36:17 下午 org.springframework.web.context.support.XmlWebApplicationContext prepareRefresh
信息: Refreshing Root WebApplicationContext: startup date [Tue Apr 24 13:36:17 CST 2018]; root of context hierarchy
四月 24, 2018 1:36:17 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
信息: Loading XML bean definitions from class path resource [applicationContext.xml]
四月 24, 2018 1:36:18 下午 org.springframework.web.context.ContextLoader initWebApplicationContext
信息: Root WebApplicationContext: initialization completed in 282 ms

13:36:25.565 [RMI TCP Connection(3)-127.0.0.1] ERROR com.glitter.demo.listener.DemoListener - ===========================error================================
13:36:27.791 [RMI TCP Connection(3)-127.0.0.1] FATAL com.glitter.demo.listener.DemoListener - ===========================fatal================================

[2018-04-24 01:36:29,362] Artifact glitter-spring-demo:war exploded: Artifact is deployed successfully
[2018-04-24 01:36:29,362] Artifact glitter-spring-demo:war exploded: Deploy took 13,461 milliseconds



1.如上，工程中只引入的log4j2的jar并没有引入任何配置文件，在测试的时候可以看到有ERROR输出和FATAL输出。
  “ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.”

2.输出logger时可以看到只有error和fatal级别的被输出来，是因为没有配置文件就使用默认的，默认级别是error，所以只有error和fatal输出来

3.如果使用tomcat7.0.43及以下版本会输出如上一个错误信息，虽然并不影响项目正常启动。所以我们最好使用tomcat8及以上版本。

4.如果在此基础上，只要在resources目录下放置log4j2.xml配置文件,并且设定日志级别为DEBUG,即可得到如下打印日志，<configuration status="TRACE" monitorInterval="1800">由于此处配置级别较低，log4j2的加载日志也会详细打印出来。

E:\my_tomcat\apache-tomcat-8.5.29\bin\catalina.bat run
[2018-04-24 03:35:34,490] Artifact glitter-spring-demo:war exploded: Server is not connected. Deploy is not available.
Using CATALINA_BASE:   "C:\Users\Administrator\.IntelliJIdea2016.3\system\tomcat\Unnamed_glitter-spring-demo"
Using CATALINA_HOME:   "E:\my_tomcat\apache-tomcat-8.5.29"
Using CATALINA_TMPDIR: "E:\my_tomcat\apache-tomcat-8.5.29\temp"
Using JRE_HOME:        "E:\Java\jdk\jdk1.8.0_151"
Using CLASSPATH:       "E:\my_tomcat\apache-tomcat-8.5.29\bin\bootstrap.jar;E:\my_tomcat\apache-tomcat-8.5.29\bin\tomcat-juli.jar"
Connected to the target VM, address: '127.0.0.1:50328', transport: 'socket'
24-Apr-2018 15:35:35.300 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.29
24-Apr-2018 15:35:35.302 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Mar 5 2018 13:11:12 UTC
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.29.0
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Windows 7
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            6.1
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             E:\Java\jdk\jdk1.8.0_151\jre
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_151-b12
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         C:\Users\Administrator\.IntelliJIdea2016.3\system\tomcat\Unnamed_glitter-spring-demo
24-Apr-2018 15:35:35.303 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         E:\my_tomcat\apache-tomcat-8.5.29
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=C:\Users\Administrator\.IntelliJIdea2016.3\system\tomcat\Unnamed_glitter-spring-demo\conf\logging.properties
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:50328,suspend=y,server=n
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcom.sun.management.jmxremote=
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcom.sun.management.jmxremote.port=1099
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcom.sun.management.jmxremote.ssl=false
24-Apr-2018 15:35:35.304 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcom.sun.management.jmxremote.authenticate=false
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.rmi.server.hostname=127.0.0.1
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=C:\Users\Administrator\.IntelliJIdea2016.3\system\tomcat\Unnamed_glitter-spring-demo
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=E:\my_tomcat\apache-tomcat-8.5.29
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=E:\my_tomcat\apache-tomcat-8.5.29\temp
24-Apr-2018 15:35:35.305 信息 [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [E:\Java\jdk\jdk1.8.0_151\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;E:\Java\apache-maven-3.3.3\bin;C:\Program Files (x86)\Common Files\NetSarang;E:\Java\zookeeper-3.4.6\bin;E:\Java\jdk\jdk1.8.0_151\bin;D:\app\Administrator\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;E:\svn\Subversion\bin;D:\Program Files\TortoiseSVN\bin;E:\svn\Subversion\bin;D:\Program Files\Git\bin;D:\Program Files\TortoiseGit\bin;E:\Java\apache-jmeter-3.3\bin;d:\Program Files\OpenVPN\bin;D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin;E:\Java\nginx-1.13.8;D:\Program File\Fiddler;.]
24-Apr-2018 15:35:35.394 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler ["http-nio-8080"]
24-Apr-2018 15:35:35.407 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read
24-Apr-2018 15:35:35.413 信息 [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler ["ajp-nio-8009"]
24-Apr-2018 15:35:35.414 信息 [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read
24-Apr-2018 15:35:35.415 信息 [main] org.apache.catalina.startup.Catalina.load Initialization processed in 377 ms
24-Apr-2018 15:35:35.440 信息 [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]
24-Apr-2018 15:35:35.440 信息 [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.29
24-Apr-2018 15:35:35.449 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler ["http-nio-8080"]
24-Apr-2018 15:35:35.459 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler ["ajp-nio-8009"]
24-Apr-2018 15:35:35.462 信息 [main] org.apache.catalina.startup.Catalina.start Server startup in 47 ms
Connected to server
[2018-04-24 03:35:35,563] Artifact glitter-spring-demo:war exploded: Artifact is being deployed, please wait...
24-Apr-2018 15:35:36.611 信息 [RMI TCP Connection(3)-127.0.0.1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2018-04-24 15:35:39,017 RMI TCP Connection(3)-127.0.0.1 DEBUG Starting LoggerContext[name=${projectName}] from configuration at null
2018-04-24 15:35:39,020 RMI TCP Connection(3)-127.0.0.1 DEBUG Starting LoggerContext[name=${projectName}, org.apache.logging.log4j.core.LoggerContext@77270877] with configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml]...
2018-04-24 15:35:39,021 RMI TCP Connection(3)-127.0.0.1 DEBUG Shutdown hook enabled. Registering a new one.
2018-04-24 15:35:39,119 RMI TCP Connection(3)-127.0.0.1 DEBUG Initializing configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml]
2018-04-24 15:35:39,192 RMI TCP Connection(3)-127.0.0.1 DEBUG Installed 1 script engine
2018-04-24 15:35:39,444 RMI TCP Connection(3)-127.0.0.1 DEBUG Oracle Nashorn version: 1.8.0_151, language: ECMAScript, threading: Not Thread Safe, compile: true, names: [nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript], factory class: jdk.nashorn.api.scripting.NashornScriptEngineFactory
2018-04-24 15:35:39,445 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'Core' found 117 plugins
2018-04-24 15:35:39,445 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'Level' found 0 plugins
2018-04-24 15:35:39,448 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'Lookup' found 14 plugins
2018-04-24 15:35:39,450 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=layout, class=org.apache.logging.log4j.core.layout.PatternLayout].
2018-04-24 15:35:39,460 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'TypeConverter' found 26 plugins
2018-04-24 15:35:39,470 RMI TCP Connection(3)-127.0.0.1 DEBUG PatternLayout$Builder(pattern="[spring-demo] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p => %c - %m%n", PatternSelector=null, Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml), Replace=null, charset="null", alwaysWriteExceptions="null", disableAnsi="null", noConsoleNoAnsi="null", header="null", footer="null")
2018-04-24 15:35:39,471 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'Converter' found 42 plugins
2018-04-24 15:35:39,486 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=appender, class=org.apache.logging.log4j.core.appender.ConsoleAppender].
2018-04-24 15:35:39,495 RMI TCP Connection(3)-127.0.0.1 DEBUG ConsoleAppender$Builder(target="SYSTEM_OUT", follow="null", direct="null", bufferedIo="null", bufferSize="null", immediateFlush="null", ignoreExceptions="null", PatternLayout([spring-demo] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p => %c - %m%n), name="Console", Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml), Filter=null)
2018-04-24 15:35:39,497 RMI TCP Connection(3)-127.0.0.1 DEBUG Starting OutputStreamManager SYSTEM_OUT.false.false
2018-04-24 15:35:39,497 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=layout, class=org.apache.logging.log4j.core.layout.PatternLayout].
2018-04-24 15:35:39,498 RMI TCP Connection(3)-127.0.0.1 DEBUG PatternLayout$Builder(pattern="[spring-demo] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p => %c - %m%n", PatternSelector=null, Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml), Replace=null, charset="null", alwaysWriteExceptions="null", disableAnsi="null", noConsoleNoAnsi="null", header="null", footer="null")
2018-04-24 15:35:39,499 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=SizeBasedTriggeringPolicy, class=org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy].
2018-04-24 15:35:39,507 RMI TCP Connection(3)-127.0.0.1 DEBUG createPolicy(size="50MB")
2018-04-24 15:35:39,509 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=Policies, class=org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy].
2018-04-24 15:35:39,510 RMI TCP Connection(3)-127.0.0.1 DEBUG createPolicy(={SizeBasedTriggeringPolicy(size=52428800)})
2018-04-24 15:35:39,510 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=DefaultRolloverStrategy, class=org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy].
2018-04-24 15:35:39,515 RMI TCP Connection(3)-127.0.0.1 DEBUG DefaultRolloverStrategy$Builder(max="20", min="null", fileIndex="null", compressionLevel="null", ={}, stopCustomActionsOnError="null", tempCompressedFilePattern="null", Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml))
2018-04-24 15:35:39,516 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=appender, class=org.apache.logging.log4j.core.appender.RollingFileAppender].
2018-04-24 15:35:39,519 RMI TCP Connection(3)-127.0.0.1 DEBUG RollingFileAppender$Builder(fileName="/home/logs/spring-demo.log", filePattern="/home/logs/spring-demo.log.%i", append="null", locking="null", Policies(CompositeTriggeringPolicy(policies=[SizeBasedTriggeringPolicy(size=52428800)])), DefaultRolloverStrategy(DefaultRolloverStrategy(min=1, max=20, useMax=true)), advertise="null", advertiseUri="null", createOnDemand="null", filePermissions="null", fileOwner="null", fileGroup="null", bufferedIo="null", bufferSize="null", immediateFlush="null", ignoreExceptions="null", PatternLayout([spring-demo] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p => %c - %m%n), name="RollingFile", Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml), Filter=null)
2018-04-24 15:35:39,526 RMI TCP Connection(3)-127.0.0.1 DEBUG Starting RollingFileManager /home/logs/spring-demo.log
2018-04-24 15:35:39,528 RMI TCP Connection(3)-127.0.0.1 DEBUG PluginManager 'FileConverter' found 2 plugins
2018-04-24 15:35:39,529 RMI TCP Connection(3)-127.0.0.1 DEBUG Setting prev file time to 2018-04-24T14:57:27.068+0800
2018-04-24 15:35:39,532 RMI TCP Connection(3)-127.0.0.1 DEBUG Initializing triggering policy CompositeTriggeringPolicy(policies=[SizeBasedTriggeringPolicy(size=52428800)])
2018-04-24 15:35:39,532 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=appenders, class=org.apache.logging.log4j.core.config.AppendersPlugin].
2018-04-24 15:35:39,532 RMI TCP Connection(3)-127.0.0.1 DEBUG createAppenders(={Console, RollingFile})
2018-04-24 15:35:39,533 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=appender-ref, class=org.apache.logging.log4j.core.config.AppenderRef].
2018-04-24 15:35:39,533 RMI TCP Connection(3)-127.0.0.1 DEBUG createAppenderRef(ref="Console", level="null", Filter=null)
2018-04-24 15:35:39,533 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=appender-ref, class=org.apache.logging.log4j.core.config.AppenderRef].
2018-04-24 15:35:39,534 RMI TCP Connection(3)-127.0.0.1 DEBUG createAppenderRef(ref="RollingFile", level="null", Filter=null)
2018-04-24 15:35:39,534 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=root, class=org.apache.logging.log4j.core.config.LoggerConfig$RootLogger].
2018-04-24 15:35:39,535 RMI TCP Connection(3)-127.0.0.1 DEBUG createLogger(additivity="null", level="DEBUG", includeLocation="null", ={Console, RollingFile}, ={}, Configuration(E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml), Filter=null)
2018-04-24 15:35:39,537 RMI TCP Connection(3)-127.0.0.1 DEBUG Building Plugin[name=loggers, class=org.apache.logging.log4j.core.config.LoggersPlugin].
2018-04-24 15:35:39,538 RMI TCP Connection(3)-127.0.0.1 DEBUG createLoggers(={root})
2018-04-24 15:35:39,539 RMI TCP Connection(3)-127.0.0.1 DEBUG Configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml] initialized
2018-04-24 15:35:39,539 RMI TCP Connection(3)-127.0.0.1 DEBUG Starting configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml]
2018-04-24 15:35:39,540 RMI TCP Connection(3)-127.0.0.1 DEBUG Started configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml] OK.
2018-04-24 15:35:39,540 RMI TCP Connection(3)-127.0.0.1 DEBUG Shutting down OutputStreamManager SYSTEM_OUT.false.false-1
2018-04-24 15:35:39,541 RMI TCP Connection(3)-127.0.0.1 DEBUG Shut down OutputStreamManager SYSTEM_OUT.false.false-1, all resources released: true
2018-04-24 15:35:39,541 RMI TCP Connection(3)-127.0.0.1 DEBUG Appender DefaultConsole-1 stopped with status true
2018-04-24 15:35:39,541 RMI TCP Connection(3)-127.0.0.1 DEBUG Stopped org.apache.logging.log4j.core.config.DefaultConfiguration@12cd5d08 OK
2018-04-24 15:35:39,545 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName}
2018-04-24 15:35:39,547 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName},component=StatusLogger
2018-04-24 15:35:39,549 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName},component=ContextSelector
2018-04-24 15:35:39,550 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName},component=Loggers,name=
2018-04-24 15:35:39,551 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName},component=Appenders,name=Console
2018-04-24 15:35:39,552 RMI TCP Connection(3)-127.0.0.1 DEBUG Registering MBean org.apache.logging.log4j2:type=${projectName},component=Appenders,name=RollingFile
2018-04-24 15:35:39,554 RMI TCP Connection(3)-127.0.0.1 DEBUG LoggerContext[name=${projectName}, org.apache.logging.log4j.core.LoggerContext@77270877] started OK with configuration XmlConfiguration[location=E:\workspaces-idea\GITHUB\glitter-spring-demo\target\spring-demo\WEB-INF\classes\log4j2.xml].
${projectName}
[spring-demo] [2018-04-24 15:35:39.758] [RMI TCP Connection(3)-127.0.0.1] DEBUG => com.glitter.demo.listener.DemoListener - ===========================debug================================
2018-04-24 15:35:39,763 RMI TCP Connection(3)-127.0.0.1 DEBUG AsyncLogger.ThreadNameStrategy=UNCACHED (user specified null, default is UNCACHED)
[spring-demo] [2018-04-24 15:35:39.764] [RMI TCP Connection(3)-127.0.0.1] INFO  => com.glitter.demo.listener.DemoListener - ===========================info================================
[spring-demo] [2018-04-24 15:35:39.764] [RMI TCP Connection(3)-127.0.0.1] WARN  => com.glitter.demo.listener.DemoListener - ===========================warn================================
[spring-demo] [2018-04-24 15:35:39.764] [RMI TCP Connection(3)-127.0.0.1] ERROR => com.glitter.demo.listener.DemoListener - ===========================error================================
[spring-demo] [2018-04-24 15:35:39.764] [RMI TCP Connection(3)-127.0.0.1] FATAL => com.glitter.demo.listener.DemoListener - ===========================fatal================================
24-Apr-2018 15:35:39.765 信息 [RMI TCP Connection(3)-127.0.0.1] org.springframework.web.context.ContextLoader.initWebApplicationContext Root WebApplicationContext: initialization started
24-Apr-2018 15:35:39.808 信息 [RMI TCP Connection(3)-127.0.0.1] org.springframework.web.context.support.XmlWebApplicationContext.prepareRefresh Refreshing Root WebApplicationContext: startup date [Tue Apr 24 15:35:39 CST 2018]; root of context hierarchy
24-Apr-2018 15:35:39.849 信息 [RMI TCP Connection(3)-127.0.0.1] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions Loading XML bean definitions from class path resource [applicationContext.xml]
24-Apr-2018 15:35:39.957 信息 [RMI TCP Connection(3)-127.0.0.1] org.springframework.web.context.ContextLoader.initWebApplicationContext Root WebApplicationContext: initialization completed in 191 ms
2018-04-24 15:35:40,034 RMI TCP Connection(3)-127.0.0.1 DEBUG Log4jServletContextListener ensuring that Log4j starts up properly.
2018-04-24 15:35:40,039 RMI TCP Connection(3)-127.0.0.1 DEBUG Log4jServletFilter initialized.
[2018-04-24 03:35:40,062] Artifact glitter-spring-demo:war exploded: Artifact is deployed successfully
[2018-04-24 03:35:40,062] Artifact glitter-spring-demo:war exploded: Deploy took 4,499 milliseconds
24-Apr-2018 15:35:45.456 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [E:\my_tomcat\apache-tomcat-8.5.29\webapps\manager]
24-Apr-2018 15:35:45.578 信息 [localhost-startStop-1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
24-Apr-2018 15:35:45.585 信息 [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [E:\my_tomcat\apache-tomcat-8.5.29\webapps\manager] has finished in [128] ms



=================================================================================分割线======================================================================================

一.log2j 配置文件详解
配置文件的格式和位置
配置文件的格式：log2j配置文件可以是xml格式的，也可以是json格式的，
配置文件的位置：log4j2默认会在classpath目录下寻找log4j2.xml、log4j.json、log4j.jsn等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台，也可以对配置文件自定义位置（需要在web.xml中配置），一般放置在src/main/resources根目录下即可

纯Java方式：
public static void main(String[] args) throws IOException {
    File file = new File("D:/log4j2.xml");
    BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
    final ConfigurationSource source = new ConfigurationSource(in);
    Configurator.initialize(null, source);
    Logger logger = LogManager.getLogger("myLogger");
}

Web工程方式：
<!-- 如果在classpath下即resource下放置了log4j2.xml,此处配置可以省略,如果此处配置了路径和名称会优先使用此处的 -->
<context-param>
    <param-name>log4jConfiguration</param-name>
    <param-value>classpath:log4j2.xml</param-value>
</context-param>
<!-- 监听配置与不配置在日志使用和输出上并没有看出有什么区别,不配置并不影响代码中的日志按照xml中的配置进行打印,此处日后可在慢慢研究,本版先配置上 -->
<listener>
    <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
</listener>


二.系统选择配置文件的优先级（从先到后）如下.

(1).classpath下的名为 log4j2-test.json 或者 log4j2-test.jsn 的文件
(2).classpath下的名为 log4j2-test.xml 的文件
(3).classpath下名为 log4j2.json 或者 log4j2.jsn 的文件
(4).classpath下名为 log4j2.xml 的文件

我们一般默认使用 log4j2.xml 进行命名。如果本地要测试，可以把 log4j2-test.xml 放到 classpath，而正式环境使用 log4j2.xml，则在打包部署的时候不要打包 log4j2-test.xml 即可。


三.配置.

Log4j允许配置文件指定在web.xml中，使用log4jConfiguartion上下文参数。Log4j将会通过以下方式查找配置：

1.如果有路径指定，那么它就会被搜索建立为servlet上下文资源。例如，如果log4jConfiguration包含了logging.xml，那么Log4j将会根据这个名字在web应用的root目录下查找文件。

2.如果没有指定文件路径，log4j将会查找在WEB-INFO下以log4j2开头的文件。如果发现多个文件并且有一个是以应用名称命名的则使用该文件，否则，使用第一个查找到的。

3.正常的搜索序列会再去查找classpath下和URLs定位到的配置文件。


四.Servlet3.0以及以上

  一个servlet3.0及以上的web应用程序是指任何<web-app>的version是3.0或者更高的。当然，应用程序必须可以兼容在web容器中运行。比如有些：Tomcat7.0及更高，Glassfish3.0及更高，JBoss7.0及更高或者WebLogic12c及更高，WebSphere8.0及更高。

  Log4j 2‘只工作在’servlet3.0或者更高的web应用中。它能够在应用程序启动时自动启动在应用关闭时自动卸载。多亏有servlet3.0中增加的ServletContainerInitializer API，相关联的Filter和ServletContextListener类可以在web应用中启动的时候动态的进行注册。

  重要注意事项！考虑到性能问题，容器会自动把一些既定的jars忽略初始化，tomcat版本号小于7.0.43的会自动忽略log4j*.jar，导致上述特性不能正常工作，这个问题在7.0.43及以上版本中已经修复了。如果使用之前版本，请更改catalina.properties文件，并从jarsToSkip属性中将log4j*.jar移除，在其它容器中如果遇到类似事情，也需要做同样的事情。

  Log4j2 Web JAR文件是一个web片段用来配置在其它web片段前的顺序。它包含了一个容器自动发现并初始化的ServletContainerInitializer(Log4jServletContainerInitializer)，它将Log4jServletContextListener和Log4jServletFilter添加到ServletContext中。这些类初始化或者取消初始化Log4j的配置。

  对于某些用户来说，自动启动Log4j是有问题的或者不受欢迎的。你可以使用isLog4jAutoInitializationDisabled参数来关闭自动启动。在web.xml中进行如下设置，即可自动取消启动。

  <context-param>
      <param-name>isLog4jAutoInitializationDisabled</param-name>
      <param-value>true</param-value>
  </context-param>

  一旦你禁止自动初始化，你必须像Servlet2.5 web程序中那样进行初始化操作。而且必须要在其它的框架启动之前启动。

5.jar包依赖

<!-- log4j2的核心jar包 -->
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.10.0</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.10.0</version>
</dependency>

<!-- 如果不在web.xml中配置监听器,此jar包可省 -->
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-web</artifactId>
    <version>2.10.0</version>
</dependency>

<!--需要使用到了log4j2的AsyncLogger，即做异步日志输出,则需要包含disruptor的jar包,如果全部是同步日志输出,则不需要此jar包 -->
<dependency>
    <groupId>com.lmax</groupId>
    <artifactId>disruptor</artifactId>
    <version>3.3.11</version>
</dependency>

<!-- 如果需要slf4j则配置以下jar包,如果直接使用log4j2做日志打印,则下方jar包不依赖 -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.25</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-slf4j-impl</artifactId>
    <version>2.10.0</version>
</dependency>

<!-- 桥接：告诉commons-logging使用Log4j2,这个jar包我没加，加上的话应该有利于spring日志打印，因为spring依赖的日志包是common-logging包 -->
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-jcl</artifactId>
    <version>2.10.0</version>
</dependency>


七.使用slf4j来作为项目中打印日志时，调用日志框架的入口。
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.25</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-slf4j-impl</artifactId>
    <version>2.10.0</version>
</dependency>

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

private Logger logger = LoggerFactory.getLogger(this.getClass());

logger.debug("===========================debug================================");
logger.info("===========================info================================");
logger.warn("===========================warn================================");
logger.error("===========================error================================");

如上，引入slf4j相关的两个jar包,其中slf4j-api是slf4j的api的jar包，log4j-slf4j-impl是log4j2的项目组针对slf4j的api开发的实现，
通过如果项目中是使用slf4j来打印日志的，则即为调用log4j-slf4j-impl包中的对应实现方法，而该包中的实现方法会进一步调用log4j-api和log4j-core包的方法，最终使用log4j2的实现来做日志打印。

项目中使用slf4j打印日志与log4j的加载过程无关,只是调用方式变了而已，不是直接调用log4j-api,而是调用slf4j-api，进一步调用log4j2的实现。
此过程中如果不引入log4j-slf4j-impl包，不影响log4j2的加载，但是项目中使用slf4j打印日志的地方会没有日志输出，想想都知道，是因为没有实现类嘛。虽然实现类就在那，一切都准备好了，但是你就是不调，那可没辙。


八.关于异步日志，如果log4j2.xml中配置了异步日志输出，则必须引入disruptor包，否则项目启动时会报如下异常。
   另外对disruptor包的版本号也要选择好,如果使用的太旧，而log4j2的包又太新的话，那么log4j2可能会引用disruptor较新的包的方法，就会导致找不到方法的异常，所以要注意jar包之间的版本号兼容。

2018-04-24 16:27:19,086 RMI TCP Connection(3)-127.0.0.1 ERROR Unable to invoke factory method in class org.apache.logging.log4j.core.async.AsyncLoggerConfig for element AsyncLogger: java.lang.NoClassDefFoundError: com/lmax/disruptor/EventFactory java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:136)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:958)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:898)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:890)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:513)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:237)
	at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:249)
	at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:545)
	at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:261)
	at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:240)
	at org.apache.logging.log4j.core.config.Configurator.initialize(Configurator.java:158)
	at org.apache.logging.log4j.web.Log4jWebInitializerImpl.initializeNonJndi(Log4jWebInitializerImpl.java:168)
	at org.apache.logging.log4j.web.Log4jWebInitializerImpl.start(Log4jWebInitializerImpl.java:110)
	at org.apache.logging.log4j.web.Log4jServletContainerInitializer.onStartup(Log4jServletContainerInitializer.java:57)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5204)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:754)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:730)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1736)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:482)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:431)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: com/lmax/disruptor/EventFactory
	at org.apache.logging.log4j.core.config.AbstractConfiguration.getAsyncLoggerConfigDelegate(AbstractConfiguration.java:202)
	at org.apache.logging.log4j.core.async.AsyncLoggerConfig.<init>(AsyncLoggerConfig.java:85)
	at org.apache.logging.log4j.core.async.AsyncLoggerConfig.createLogger(AsyncLoggerConfig.java:203)
	... 62 more
Caused by: java.lang.ClassNotFoundException: com.lmax.disruptor.EventFactory
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1291)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)
	... 65 more


九.说明，log4j2的加载始于项目启动时，jvm装载类文件时执行的静态代码块，该时机要远远早于spring框架的加载，所以log4j2的启动早于spring，与spring无关，与SPI机制有关。


十.格式说明，参考：https://blog.csdn.net/q176782/article/details/78288734
 例如：  pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"

 再如：  pattern="[${project.artifactId}] [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %-5p => %c - %m%n"

 %d{HH:mm:ss.SSS} 表示输出到毫秒的时间
 %t 输出当前线程名称
 %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
 %logger 输出logger名称，因为Root Logger没有名称，所以没有输出
 %msg 日志文本
 %m 显示输出消息
 %n 换行

 其他常用的占位符有：
 %F 输出所在的类文件名，如Log4j2Test.java
 %L 输出行号
 %M 输出所在方法名
 %l 输出语句所在的行数, 包括类名、方法名、文件名、行数
 %p 显示该条日志的优先级,如INFO,ERROR等
 %c 列出logger名字空间的全称，如果加上{<层数>}表示列出从最内层算起的指定层数的名字空间，假设当前logger名字空间是"a.b.c"，则输出a.b.c




